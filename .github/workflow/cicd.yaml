name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag the Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        run: docker push ${{ env.IMAGE }}

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the project directory on the EC2 instance
            # Assumes your project is cloned to /home/ubuntu/Risk-Flag-Prediction
            cd /home/ubuntu/Risk-Flag-Prediction

            # Pull the latest Docker image from ECR.
            # Your EC2 IAM role will handle authentication.
            docker pull ${{ env.IMAGE }}

            # Stop and remove the old container if it exists
            docker stop risk-flag-app || true
            docker rm risk-flag-app || true

            # Run the new container with the latest image.
            # Mount the correct `models` and `artifacts` directories.
            docker run -d \
              --name risk-flag-app \
              -p 5000:5000 \
              --restart always \
              -v /home/ubuntu/Risk-Flag-Prediction/artifacts:/app/artifacts \
              -v /home/ubuntu/Risk-Flag-Prediction/models:/app/models \
              ${{ env.IMAGE }}

            # Remove old images to save disk space
            docker image prune -f
