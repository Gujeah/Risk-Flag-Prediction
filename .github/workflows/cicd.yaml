name: CI/CD Pipeline to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.IMAGE }}
          docker push ${{ env.IMAGE_LATEST }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: AWS_REGION,ECR_REGISTRY,ECR_REPOSITORY
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        script: |
          echo "=== Starting deployment ==="

          # Set image name
          IMAGE_LATEST="${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          echo "Image to deploy: $IMAGE_LATEST"

          # Configure AWS CLI (if not already configured)
          if ! aws sts get-caller-identity > /dev/null 2>&1; then
            echo "Configuring AWS CLI..."
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.AWS_REGION }}
          fi

          echo "Logging into ECR..."
          aws ecr get-login-password --region ${AWS_REGION} | \
            docker login --username AWS --password-stdin ${ECR_REGISTRY}

          echo "Pulling latest image..."
          docker pull ${IMAGE_LATEST}

          echo "Stopping old container if it exists..."
          docker stop my-app || true
          docker rm my-app || true

          echo "Running new container..."
          docker run -d -p 5000:5000 --name my-app --restart unless-stopped ${IMAGE_LATEST}

          echo "Checking if container is running..."
          docker ps | grep my-app

          echo "Cleaning up old images..."
          docker image prune -f

          echo "=== Deployment completed successfully ==="

      - name: Verify Deployment
        run: |
          echo "âœ… CI/CD pipeline executed successfully!"
          echo "ðŸš€ Application deployed to: http://${{ secrets.EC2_HOST }}:5000"
          echo "ðŸ“¦ Image: ${{ env.IMAGE_LATEST }}"

# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build and tag the Docker image
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Debug: Print variables to help troubleshoot
#           echo "ECR_REGISTRY: $ECR_REGISTRY"
#           echo "ECR_REPOSITORY: $ECR_REPOSITORY"
#           echo "IMAGE_TAG: $IMAGE_TAG"

#           # Validate required variables
#           if [ -z "$ECR_REGISTRY" ]; then
#             echo "Error: ECR_REGISTRY is empty"
#             exit 1
#           fi
#           if [ -z "$ECR_REPOSITORY" ]; then
#             echo "Error: ECR_REPOSITORY secret is not set or empty"
#             exit 1
#           fi

#           # Build and tag the image
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

#           # Set environment variables for next steps
#           echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
#           echo "IMAGE_LATEST=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_ENV

#       - name: Push Docker image to ECR
#         run: |
#           docker push ${{ env.IMAGE }}
#           docker push ${{ env.IMAGE_LATEST }}

#       - name: Build Complete
#         run: |
#           echo "Docker image built and pushed successfully!"
#           echo "Image: ${{ env.IMAGE }}"
#           echo "Latest: ${{ env.IMAGE_LATEST }}"
